// ==UserScript==
// @name         CamPRO - WIMS Enhancer
// @namespace    http://tampermonkey.net/
// @version      0.3.001.01
// @description  Streamlines WIMS case management with quick action buttons and improved UI
// @author       camrees &
// @match        https://optimus-internal-eu.amazon.com/*
// @grant        none
// @run-at       document-end
// @updateURL    https://raw.githubusercontent.com/syhros/CamPRO/refs/heads/main/campro.js
// @downloadURL  https://raw.githubusercontent.com/syhros/CamPRO/refs/heads/main/campro.js
// ==/UserScript==

// 0.3.001.01 - Added diagnostics for quickButtons visibility
// 0.3.001.00 - Added Quick Buttons (Assign, Placeholder Resolve), Debounced Search, Corrected container error

(function() {
    'use strict';

    // ========== STYLES ==========
    const CONTAINER_STYLES = {
        position: 'fixed',
        bottom: '0',
        left: '0',
        width: '100vw',
        background: '#1f1f1f',
        padding: '10px 0 0 0', // Added padding top
        display: 'flex',
        flexDirection: 'column', // Changed to column for better layout of internal containers
        alignItems: 'center',
        zIndex: '9998',
        boxShadow: '0 -2px 10px rgba(0,0,0,0.3)',
        transition: 'transform 0.3s',
        height: 'auto' // Keep auto for content
    };

    const BUTTON_STYLES = { // General style for action buttons from search
        flex: '1 1 0',
        height: '90%',
        margin: '0 4px',
        background: '#2196F3',
        color: 'white',
        border: 'none',
        borderRadius: '3px',
        cursor: 'pointer',
        fontSize: '13px',
        transition: 'background-color 0.2s',
        whiteSpace: 'normal',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
    };

    const CONTROL_BUTTON_STYLES = { // For Snooze and Quick Action buttons
        padding: '6px 10px',
        minWidth: '30px',
        height: '30px',
        background: '#444',
        color: '#fff',
        border: 'none',
        borderRadius: '4px',
        cursor: 'pointer',
        fontSize: '13px',
        margin: '0 3px', // Added margin for spacing
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
    };


    // ========== DATA STRUCTURE EXAMPLES ==========
    const siteDictionary = {
        "UK": {
            "UK": {
                "Delivery Station": ["ALT1","DAB1","DBH3","DBI2","DBI3","DBI4","DBI5","DBI7","DBN2_UNIT 5","DBN2_UNIT 6", "DBN5",
                                    "DBR1","DBR2","DBR3","DBS2","DBS3","DBT3","DBT4","DCE1","DCF1","DCR1","DCR2","DCR3","DDD1",
                                    "DDN1","DEH1","DEX2","DHA1","DHA2","DHP1","DHU2","DHW1","DIG1","DIP1","DLS2","DLS4","DBN2",
                                    "DLU2","DME1","DME4","DNE2","DNE3","DNG1","DNG2","DNN1","DNR1","DOX2","DPE1","DPE2","DPN1","DPO1","DPR1",
                                    "DRG2","DRG3","DRH1","DRM2","DRM4","DRM5","DRR1","DSA1","DSA4","DSN1","DSO2","DSS2","DST1","DWN2",
                                    "DWR1","DWR2","DXE1","DXG1","DXG2","DXM2","DXM3","DXM4","DXM5","DXN1","DXP1","DXS1","DXW2","DXW3","HIG3","HUK3","HRM2 ", "HSA7",
                                    "UGL1","UKK1","ULI2","ULO1","ULO5","ULO6","ULS1","UMC3","UNW2","UPO1","USH2","UUK1","UUK2","UUK3A","UUK3B"],
                "3PL": ["ARRO-WORCESTE-GB","AUA4","EUKA - UNIT 10","EUKA - UNIT 9","EMSA","EUKB","EUKD","IUKM","SEKO","XUKO","XUKR","XUKA","XLP1","VECG","VEGI","VEMS","VEOD","VEPG","VEQP","VEBR"],
                "FC": ["BHX1","BHX10","BHX2","BHX3","BHX5","BHX7","BRS1","BRS2","CWL1","DHA3","DSA6","DSA7","DWN1","DWN1_Sublet","EDI4","EMA1",
                      "EMA2","EMA3","EMA4","HOX2","EUK1","EUK5","EUKA - UNIT 11","GLA1","GLO2","HEH1","HST1","HXM1","HXW3","IBA9","LBA1","LBA2","LBA3","LBA5",
                      "LCY1","LCY2","LCY3","LCY5","LHR8","LPL2","LTN1","LTN2","LTN4","LTN5","LTN7","MAN1","MAN2","MAN3","MAN4","MME1",
                      "MME2","NCL1","NCL2","NEH1","SLO1","UMC2","XBH7","CLS9","EMA4"],
                "Dropship": ["PILH"],
                "IXD": ["BHX4","LBA4","UKK2"],
                "Sort Center": ["BHX8","CBI9","CCE9","CHW9","CUK8","CUK9","HTN7","LBA8","LBA9","LCY8","MAN8","SBS2","SEH1","SNG1","STN7","STN8","SXW2","STN9","SXW9","LPL9","CBI8"],
                "Retail": ["ILC5","ILC6","ILC8","ILD1","ILD7","ILF3","ILF8","ILH1","ILH3","ILH4","ILH5","ILH6","ILH7","ILH8","ILK1","ILK5",
                          "ILK7","ILO2","ILO3","ILO4","ILO5","ILO6","ILO8","ILO9","ILP4","LHR90"],
                "Vendor Flex": ["PUKK","PUKM","VEBF","VECA","VECB","VECU","VEEA","VEEO","VEGJ","VEGM","VEKA","VEPD","VEEI","VELC","VEMO","VERW","VELM","VEAG"],
                "Return Center": ["XBH6","XBH8","XUKC"],
                "Commercial Carriers": ["Royal Mail"]
            },
            "IE": {
                "Delivery Station": ["DIS1","DIS2"],
                "FC": ["SNN4","SNN5"]
            }
        },
    };

    let siteAttributes = {};
    for (const [region, countries] of Object.entries(siteDictionary)) {
        for (const [country, types] of Object.entries(countries)) {
            for (const [type, sites] of Object.entries(types)) {
                sites.forEach(site => {
                    siteAttributes[site] = { region, country, type };
                });
            }
        }
    };

    const fcEmailDictionary = {
        "ARRO-WORCESTE-GB":{
            'POC': 'networkcontrol@arrowxl.co.uk',
        },
    };

    const categoriesDictionary = {
        "FRONTLINE": {
            "_____________________________ FRONTLINE _____________________________": {
            }
        },
        "EQUIPMENT": {
            "Equipment: Request from Carrier": {
                "Drop provided on time": {
                    "Carrier Informs Drop has been provided": [
                        "Paste Blurb",
                        "Hello Carrier,\n Please note that this case is not required and instead you can update the VRID comment/note as follows: \n\u00a0\nTrailer ID XXX dropped on ORIGIN SITE at 00:00 AM/PM on XX/XX/2025.\n",
                        {
                            status: "Resolved"
                        }
                    ]
                },
                "Drop provided on time and site rejected": {
                    "Carrier Informs Drop has been provided. Case raised +24hrs in advance to SAT and Rejected": [
                        "Paste Blurb ",
                        "Hello Carrier,\nPlease be informed that the trailer must be dropped only between 24 to 12 hours previous to SAT.\u00a0"
                    ],
                    "Carrier Informs Drop has been provided. Case raised 24hrs-12hrs in advance to SAT and Rejected": [
                        "Carrier should provide a photo or GPS proof before proceeding with below: \nUpdate the original VRID from DROP to DETACHED for the same carrier, anticipating the loading time by 30 minutes and updating the loading type to \u201cLive\u201d. \nLoop origin site and close the case. ",
                        "Hello Carrier,\nThe site won\u2019t be able to preload the trailer in advance. Please arrive with your own trailer. \nNew SAT:\nEquipment type: DETACHED_TRAILER"
                    ],
                    "Carrier Informs Drop has been provided. Case raised less than 12hrs to SAT and Rejected": [
                        "Update the original VRID from DROP to DETACHED for the same carrier, anticipating the loading time by 30 minutes and updating the loading type to \u201cLive\u201d. \nLoop origin site and close the case",
                        "Hello Carrier,\nThe trailer has not been dropped at least 12 hours in advance as per procedure and trailer cannot be preloaded as planned. For this reason, please arrive with your own trailer.\nPlease accept the new VRID with the below details:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 New SAT:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Equipment type: DETACHED_TRAILER"
                    ]
                }
            }
        },
    };

    const buttonActions = generateButtonActions(categoriesDictionary);

    function generateButtonActions(categoriesDictionary) {
        const actions = [];
        for (const [category, subcats] of Object.entries(categoriesDictionary)) {
           for (const [subcategory, topics] of Object.entries(subcats)) {
                const raisedBy = subcategory.toLowerCase().includes('site') ? 'Site'
                                : subcategory.toLowerCase().includes('carrier') ? 'Carrier'
                                : 'Other';
                const siteInput = raisedBy === 'Site';

                for (const [topic, blurbs] of Object.entries(topics)) {
                   for (const [blurbName, blurbData] of Object.entries(blurbs)) {
                        const settings = blurbData[2] || {};
                        actions.push({
                            category, subcategory, topic, blurbName,
                            sop: blurbData[0], blurb: blurbData[1],
                            raisedBy, siteInput,
                            snooze: settings.snooze || null, status: settings.status || null
                        });
                    }
                }
            }
        }
        return actions;
    }

    function applyStyles(element, styles) {
        Object.assign(element.style, styles);
    }

    function getElement(doc, path) {
        return document.evaluate(path, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    }
    function getAddSubjectIframe() {
        return getElement(document, "//iframe[contains(@class, 'resolution-widget-container')]");
    }
    function getAddSubjectIframeDoc() {
        const iframe = getAddSubjectIframe();
        return iframe ? (iframe.contentDocument || iframe.contentWindow.document) : null;
    }
    function getAddSubject() {
        const doc = getAddSubjectIframeDoc();
        return doc ? getElement(doc, "//input[@placeholder='Add to subject']") : null;
    }
    function getCategory() {
        const doc = getAddSubjectIframeDoc();
        return doc ? getElement(doc, "//select[@name='category']") : null;
    }
    function getReplyTextbox() {
        const doc = getAddSubjectIframeDoc();
        return doc ? getElement(doc, "//textarea[@placeholder='Reply to this case...']") : null;
    }
    function getStatusDropdown() {
        const doc = getAddSubjectIframeDoc();
        return doc ? getElement(doc, "//select[@name='status']") : null;
    }
    function getFollowUpDatetime() {
        const doc = getAddSubjectIframeDoc();
        return doc ? getElement(doc, "//input[@name='dueDate' and @type='datetime-local']") : null;
    }
    function getAssignButton() {
        return getElement(document, "//button[normalize-space()='Assign to me']");
    }
    function getReplyToCase() {
        const doc = getAddSubjectIframeDoc();
        return doc ? getElement(doc, "//input[@placeholder='Reply to this case...']") : null;
    }
    function getReplyButton() {
        const doc = getAddSubjectIframeDoc();
        return doc ? getElement(doc, "//a[text()='Case Reply']") : null;
    }
    function getFollowUpButton() {
        const addSubjectIframeDoc = getAddSubjectIframeDoc();
        return getElement(addSubjectIframeDoc, "//a[text()='Case Follow Up']");
    };

    function setReactInputValue(input, value) {
        if (!input) return;
        let lastValue = input.value;
        input.value = value;
        let event = new Event('input', { bubbles: true });
        let tracker = input._valueTracker;
        if (tracker) tracker.setValue(lastValue);
        input.dispatchEvent(event);
    }
    function setReactSelectValue(selectElement, newValue) {
        if (!selectElement) return;
        selectElement.value = newValue;
        const event = new Event('change', { bubbles: true });
        selectElement.dispatchEvent(event);
    }
    const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

    async function handleButtonAction(action) {
        try {
            let subject = action.topic;
            if (action.siteInput) {
                const site = prompt("Enter site code (e.g. BHX1):");
                if (!site) return;
                subject = buildSubject(site.toUpperCase(), action.topic);
            } else {
                subject = `★ ${action.topic} ★`;
            }

            const replyToCaseInput = getReplyToCase();
            if (replyToCaseInput) {
                replyToCaseInput.focus();
                await delay(100);
            }

            const replyButton = getReplyButton();
            if (replyButton) {
                replyButton.click();
                await delay(300);
            } else {
                if (!getReplyTextbox()) {
                    showPopup('Could not activate reply area.', true);
                    return;
                }
            }

            const categorySelect = getCategory();
            if (categorySelect) setReactSelectValue(categorySelect, action.category);
            const subjectInput = getAddSubject();
            if (subjectInput) setReactInputValue(subjectInput, subject);
            const replyTextBox = getReplyTextbox();
            if (replyTextBox) setReactInputValue(replyTextBox, action.blurb);
            const statusDropdown = getStatusDropdown();
            if (statusDropdown && action.status) setReactSelectValue(statusDropdown, action.status);

            if (action.snooze) {
                const followUpDatetime = getFollowUpDatetime();
                if (followUpDatetime) {
                    let date = new Date();
                    date.setTime(date.getTime() + action.snooze * 60 * 60 * 1000);
                    const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}T${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;
                    setReactInputValue(followUpDatetime, formattedDate);
                } else {
                    showPopup('Follow-up date field not found for snooze.', true);
                }
            }
            showPopup(`Applied: ${subject}`);
        } catch (error) {
            console.error('[CamPRO] Error applying action:', error);
            showPopup('Error applying action. Check console for details.', true);
        }
    }

    function showPopup(message, isError = false) {
        const existingPopup = document.querySelector('.wims-enhancer-popup');
        if (existingPopup) existingPopup.remove();
        const popup = document.createElement('div');
        popup.classList.add('wims-enhancer-popup');
        Object.assign(popup.style, {
            position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)',
            padding: '25px 35px', background: '#000000', color: '#ffffff',
            borderLeft: isError ? '5px solid #F44336' : '5px solid #2196F3',
            borderRadius: '6px', boxShadow: '0 5px 15px rgba(0,0,0,0.3)', zIndex: '10001',
            fontFamily: '"Amazon Ember", Arial, sans-serif', minWidth: '350px', maxWidth: '600px',
            fontSize: '15px', textAlign: 'center', opacity: '0',
            transition: 'opacity 0.3s ease-in-out'
        });
        popup.textContent = message;
        document.body.appendChild(popup);
        setTimeout(() => { popup.style.opacity = '1'; }, 50);
        setTimeout(() => {
            popup.style.opacity = '0';
            setTimeout(() => popup.remove(), 300);
        }, 2500);
    }

    function searchActions(query) {
        if (!query) return [];
        const searchTerms = query.toLowerCase().trim().split(/\s+/).filter(term => term.length > 0);
        if (searchTerms.length === 0) return [];
        return buttonActions.filter(action => {
            const searchableText = [
                action.category, action.subcategory, action.topic,
                action.blurbName, action.sop, action.blurb
            ].map(text => (text || '').toLowerCase()).join(' ');
            return searchTerms.every(term => searchableText.includes(term));
        }).sort((a, b) => {
            const aText = `${a.category} ${a.subcategory} ${a.topic} ${a.blurbName}`.toLowerCase();
            const bText = `${b.category} ${b.subcategory} ${b.topic} ${b.blurbName}`.toLowerCase();
            let aScore = 0, bScore = 0;
            searchTerms.forEach(term => {
                if (aText.startsWith(term)) aScore++;
                if (bText.startsWith(term)) bScore++;
            });
            return bScore - aScore;
        });
    }

    function createStyledButton(text, title, styles, onClickAction) {
        const button = document.createElement('button');
        button.textContent = text;
        if (title) button.title = title;
        applyStyles(button, styles);
        button.onclick = onClickAction;
        return button;
    }

    function debounce(func, delay) {
        let timeoutId;
        return function(...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => {
                func.apply(this, args);
            }, delay);
        };
    }

    function createButtonContainer() {
        const mainContainer = document.createElement('div');
        applyStyles(mainContainer, CONTAINER_STYLES);

        const controlsRow = document.createElement('div');
        Object.assign(controlsRow.style, {
            display: 'flex', justifyContent: 'center', alignItems: 'center',
            gap: '10px', marginBottom: '10px', width: '100%', padding: '0 10px'
        });

        const snoozeContainer = document.createElement('div');
        Object.assign(snoozeContainer.style, { display: 'flex', justifyContent: 'center', gap: '6px' });
        const snoozeButtons = [
            { label: '15m', hours: 0.25 }, { label: '30m', hours: 0.5 },
            { label: '1h', hours: 1 }, { label: '2h', hours: 2 },
            { label: '4h', hours: 4 }, { label: '8h', hours: 8 }
        ];
        snoozeButtons.forEach(({ label, hours }) => {
            const button = createStyledButton(label, `Snooze for ${label}`, CONTROL_BUTTON_STYLES, async () => {
                const replyToCaseInput = getReplyToCase();
                if (replyToCaseInput) { replyToCaseInput.focus(); await delay(100); }
                const followUpButton = getFollowUpButton();
                if (followUpButton) { followUpButton.click(); await delay(300); } 
                else { showPopup('Follow Up button not found.', true); return; }
                const followUpDatetime = getFollowUpDatetime();
                if (followUpDatetime) {
                    const date = new Date();
                    date.setTime(date.getTime() + hours * 60 * 60 * 1000);
                    const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}T${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;
                    setReactInputValue(followUpDatetime, formattedDate);
                    showPopup(`Snoozed for ${label}.`);
                } else {
                    showPopup('Follow-up date field not found.', true);
                }
            });
            snoozeContainer.appendChild(button);
        });
        controlsRow.appendChild(snoozeContainer);

        const quickActionsContainer = document.createElement('div');
        Object.assign(quickActionsContainer.style, {
            display: 'flex',
            justifyContent: 'center',
            gap: '6px',
            // --- DIAGNOSTIC STYLES START ---
            backgroundColor: 'green', // Bright background for visibility
            padding: '5px',           // Some padding to ensure it has dimensions
            border: '2px solid yellow' // A very obvious border
            // --- DIAGNOSTIC STYLES END ---
        });
        console.log('[CamPRO] Creating quickActionsContainer:', quickActionsContainer); // Diagnostic log

        const quickButtons = [
            {
                label: 'Assign', title: 'Assign case to me', action: async () => {
                    const assignBtn = getAssignButton();
                    if (assignBtn) {
                        assignBtn.click();
                        showPopup('Case assigned to me.');
                    } else {
                        showPopup("'Assign to me' button not found.", true);
                    }
                }
            },
            {
                label: 'Resolve', title: 'Quick resolve (placeholder)', action: async () => {
                    showPopup('Quick Resolve clicked (Placeholder - implement action).');
                }
            }
        ];
        
        if (quickButtons.length > 0) {
             console.log('[CamPRO] quickButtons array has items:', quickButtons.length);
            quickButtons.forEach(({ label, title, action }) => {
                const button = createStyledButton(label, title, CONTROL_BUTTON_STYLES, action);
                quickActionsContainer.appendChild(button);
                 console.log(`[CamPRO] Appended quick button: ${label}`);
            });
        } else {
            console.log('[CamPRO] quickButtons array is empty.');
        }
        
        controlsRow.appendChild(quickActionsContainer);
        console.log('[CamPRO] Appended quickActionsContainer to controlsRow.');
        mainContainer.appendChild(controlsRow);

        const searchAreaContainer = document.createElement('div');
        Object.assign(searchAreaContainer.style, {
            position: 'relative', width: '40%', minWidth: '300px', maxWidth: '600px',
            margin: '0 auto', display: 'flex', flexDirection: 'column', alignItems: 'center'
        });
        const searchBox = document.createElement('input');
        searchBox.type = 'text';
        searchBox.placeholder = 'Search categories, topics, blurbs...';
        Object.assign(searchBox.style, {
            width: '100%', padding: '10px 12px', border: '1px solid #555',
            borderRadius: '4px', background: '#333', color: '#fff',
            height: '40px', fontSize: '14px', boxSizing: 'border-box'
        });
        searchAreaContainer.appendChild(searchBox);
        const buttonsContainer = document.createElement('div');
        Object.assign(buttonsContainer.style, {
            display: 'flex', flexDirection: 'column', gap: '4px', width: '100%',
            maxHeight: '160px', overflowY: 'auto', overflowX: 'hidden',
            background: '#2a2a2a', borderRadius: '0 0 4px 4px',
            boxShadow: '0 2px 8px rgba(0,0,0,0.2)', marginTop: '0px'
        });
        searchAreaContainer.appendChild(buttonsContainer);
        mainContainer.appendChild(searchAreaContainer);

        const debouncedSearch = debounce((query) => {
            buttonsContainer.innerHTML = '';
            if (query) {
                const results = searchActions(query);
                if (results.length === 0) {
                    const noResultsMsg = document.createElement('div');
                    noResultsMsg.textContent = 'No actions found.';
                    Object.assign(noResultsMsg.style, { padding: '10px', color: '#888', textAlign: 'center'});
                    buttonsContainer.appendChild(noResultsMsg);
                } else {
                    results.forEach(action => {
                        const button = document.createElement('button');
                        let buttonText = `${action.topic} > ${action.blurbName}`;
                        if (action.subcategory && !action.subcategory.startsWith("_")) {
                             buttonText = `${action.subcategory} > ${buttonText}`;
                        }
                        button.textContent = buttonText;
                        button.title = `Category: ${action.category}\nSOP: ${action.sop.substring(0,100)}...`;
                        applyStyles(button, {
                            ...BUTTON_STYLES, width: '100%', flex: '0 0 auto', height: 'auto',
                            minHeight: '38px', margin: '0px', padding: '8px 12px',
                            whiteSpace: 'normal', textAlign: 'left', background: '#3a3a3a',
                            borderBottom: '1px solid #4a4a4a'
                        });
                        button.onmouseover = () => button.style.background = '#4f4f4f';
                        button.onmouseout = () => button.style.background = '#3a3a3a';
                        button.onclick = () => {
                            handleButtonAction(action);
                            searchBox.value = '';
                            buttonsContainer.innerHTML = '';
                        };
                        buttonsContainer.appendChild(button);
                    });
                }
            }
        }, 300);
        searchBox.addEventListener('input', (e) => debouncedSearch(e.target.value.trim()));
        searchBox.addEventListener('focus', (e) => {
            if(!e.target.value.trim()) debouncedSearch('');
        });

        const toggleBtn = document.createElement('button');
        toggleBtn.textContent = '▼';
        Object.assign(toggleBtn.style, {
            position: 'absolute', right: '10px', top: '-28px', background: '#444',
            color: '#fff', border: 'none', borderRadius: '6px 6px 0 0',
            padding: '4px 12px', cursor: 'pointer', zIndex: '10001', fontSize: '14px'
        });
        let isBarHidden = false;
        mainContainer.style.transform = 'translateY(0)';
        toggleBtn.onclick = () => {
            isBarHidden = !isBarHidden;
            mainContainer.style.transform = isBarHidden ? `translateY(calc(100% - 0px))` : 'translateY(0)';
            toggleBtn.textContent = isBarHidden ? '▲' : '▼';
            if (!isBarHidden && !searchBox.value.trim()) buttonsContainer.innerHTML = '';
        };
        mainContainer.style.position = 'fixed';
        mainContainer.appendChild(toggleBtn);
        document.body.appendChild(mainContainer);
    }

    function init() {
        if (getAddSubjectIframe()) {
            createButtonContainer();
            console.log('[CamPRO] Enhanced WIMS Interface: Initialized');
        } else {
            console.log('[CamPRO] Enhanced WIMS Interface: Reply widget not found, not initializing UI.');
        }
    }

    let initAttempts = 0;
    const maxInitAttempts = 20;
    function attemptInit() {
        initAttempts++;
        if (getAddSubjectIframeDoc() && getReplyToCase()) {
            init();
        } else if (initAttempts < maxInitAttempts) {
            setTimeout(attemptInit, 500);
        } else {
            console.log('[CamPRO] Enhanced WIMS Interface: Failed to initialize. Key elements not found.');
        }
    }

    if (document.readyState === 'complete') {
        attemptInit();
    } else {
        window.addEventListener('load', attemptInit);
    }

    function buildSubject(site, topic) {
        const attr = siteAttributes[site] || { region: 'N/A', country: 'N/A', type: 'N/A' };
        return `★ [${attr.region}][${attr.country}][${site}][${attr.type}] ${topic} ★`;
    }

})();
